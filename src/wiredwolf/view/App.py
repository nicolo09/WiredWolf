import pygame
from abc import ABC, abstractmethod
from wiredwolf.view.Components import ButtonVContainer
from wiredwolf.view.Constants import BACKGROUND_COLOR, Screens
from functools import partial

FPS=60
class App:
    """The main window for the Wiredwolf game"""
    def __init__(self)-> None:
        pygame.init() #initializes pygame modules
        pygame.font.init()
        self._size=(640, 400) #default starting values
        self._icon = pygame.image.load('resources/icon.png') #load image from file
        pygame.display.set_icon(self._icon) #set image as window icon
        self._display_screen = pygame.display.set_mode(self._size, pygame.RESIZABLE) #the window is resizable
        pygame.display.set_caption("Wirewolf") #window title
        self._running = True
        self._game_state_manager=GameStateManager(Screens.HOME)
        self._start_screen=StartScreen(self._display_screen, self._game_state_manager)
        self._test_screen=TestScreen(self._display_screen, self._game_state_manager)
        self._new_lobby_screen=NewLobbyScreen(self._display_screen, self._game_state_manager)
        self._search_lobby_screen=SearchLobbyScreen(self._display_screen, self._game_state_manager)
        self._dictionary={Screens.HOME: self._start_screen, Screens.TEST:self._test_screen, 
                          Screens.NEW_LOBBY:self._new_lobby_screen, Screens.SEARCH_LOBBY:self._search_lobby_screen}
        self._clock = pygame.time.Clock()
        
    @property
    def screen(self)->pygame.Surface:
        """Returns the surface of the application"""
        return self._display_screen

    @property
    def screen_size(self)->tuple[int, int]:
        """Returns the size of the window"""
        return self._size
    
    @property
    def app_running(self)->bool:
        """Returns true if the window is running"""
        return self._running

    def _on_event(self, event: pygame.event.Event)-> None:
        """Handles events generated by the user"""
        if event.type == pygame.QUIT:
            #closes the window
            self._running = False
            pygame.quit()
        else:
            if event.type == pygame.WINDOWRESIZED:
                #when the window is resized, the local variable value is changed
                self._size=pygame.display.get_surface().get_size()

    def updateDisplay(self)->None:
        """Called inside the event loop, handles framerate limiting, event handling and scene switching"""
        self._clock.tick(FPS)
        self._dictionary[self._game_state_manager.currentState].run()
        pygame.display.update() #necessary or the screen won't draw at all
        for event in pygame.event.get():
            self._on_event(event) #handles generated events 

class GameStateManager:
    """The game state manager internally stores which scene is displayed"""
    def __init__(self, start_screen:Screens) -> None:
        self._current_state=start_screen

    @property
    def currentState(self)->Screens:
        """Returns the screen the app game is on"""
        return self._current_state
    
    @currentState.setter
    def currentState(self, screen:Screens)->None:
        """Sets the current game state as the parameter given"""
        self._current_state=screen

class AbstractScreen(ABC):
    """A screen abstraction, handling the base work of any screen implementation"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        self._display=display
        self._game_state_manager=game_state_manager
    
    @abstractmethod
    def run(self)->None:
        """This is where your screen is displayed"""
        raise NotImplementedError("Please implement this method")


def changeScreen(game_state_manager:GameStateManager, target_screen:Screens)->None:
    """A function to change the application screen to the given one"""
    game_state_manager.currentState=target_screen

class StartScreen(AbstractScreen):
    """The start screen, the first screen showed at startup"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton, CenteredText
        go_new_lobby=partial(changeScreen, game_state_manager, Screens.NEW_LOBBY)
        new_lobby_button=CallbackButton(go_new_lobby, 'New Lobby', 100, 50, (20, 50)) 
        go_search_lobby=partial(changeScreen, game_state_manager, Screens.SEARCH_LOBBY)
        search_lobby_button=CallbackButton(go_search_lobby, 'Search for lobbies', 100, 50, (20, 100)) 
        button_list=[new_lobby_button, search_lobby_button]
        self._button_container=ButtonVContainer(10, button_list, (640, 400))
        self._title=CenteredText("Wiredwolf")
    
    def run(self)->None:
        """The start screen, the first screen showed at startup"""
        self._display.fill(BACKGROUND_COLOR) #fills the background color for the application
        self._title.draw(self._display)
        self._button_container.draw(self._display)
        

class NewLobbyScreen(AbstractScreen):
    """A simple new lobby screen"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton, CenteredText
        go_home=partial(changeScreen, game_state_manager, Screens.HOME)
        my_button1=CallbackButton(go_home, 'new lobby screen', 100, 50, (20, 50), "#0033FF", "#5365AD") 
        button_list=[my_button1]
        self._button_container=ButtonVContainer(10, button_list, (640, 400))
        self._title=CenteredText("Create a new lobby")
    
    def run(self)->None:
        """The new lobby screen, to create a new lobby"""
        self._display.fill(BACKGROUND_COLOR)
        self._title.draw(self._display)
        self._button_container.draw(self._display)

class SearchLobbyScreen(AbstractScreen):
    """A simple search lobby screen"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton,CenteredText
        go_home=partial(changeScreen, game_state_manager, Screens.HOME)
        my_button1=CallbackButton(go_home, 'search lobby screen', 100, 50, (20, 50), "#0033FF", "#5365AD") 
        button_list=[my_button1]
        self._button_container=ButtonVContainer(10, button_list, (640, 400))
        self._title=CenteredText("Search for an existing lobby")
    
    def run(self)->None:
        """The search lobby screen, to search for existing lobbies"""
        self._display.fill(BACKGROUND_COLOR)
        self._title.draw(self._display)
        self._button_container.draw(self._display)
class TestScreen(AbstractScreen):
    """A simple test screen"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton
        go_home=partial(changeScreen, game_state_manager, Screens.HOME)
        my_button1=CallbackButton(go_home, 'test screen', 100, 50, (20, 50), "#0033FF", "#5365AD") 
        button_list=[my_button1]
        self._button_container=ButtonVContainer(10, button_list, (640, 400))
    
    def run(self)->None:
        """The test screen, to check for scene changes"""
        self._display.fill("#25A839")
        self._button_container.draw(self._display)

if __name__ == "__main__":
    my_app=App()
    while my_app.app_running:
        my_app.updateDisplay()
