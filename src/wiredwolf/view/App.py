import pygame
from pygame.locals import *
import abc

#App colors
backgroundColor="#C5C5BF"
textColor="#1A1A1A"
buttonColor="#F3A6A6"
buttonHoverColor="#DA0000"
buttonBorderColor="#372626"

class App:
    def __init__(self):
        pygame.init() #initializes pygame modules
        pygame.font.init()
        self._size=self.weight, self.height = 640, 400
        self._displayScreen = pygame.display.set_mode(self._size, pygame.HWSURFACE | pygame.DOUBLEBUF) #window size
        pygame.display.set_caption("Wirewolf") #window title
        self._running = True
        
    @property
    def screen(self)->pygame.Surface:
        """Returns the surface of the application"""
        return self._displayScreen

    @property
    def screenSize(self)->tuple[int, int]:
        """Returns the size of the window"""
        return self._size
    
    @property
    def appRunning(self)->bool:
        """Returns true if the window is running"""
        return self._running

    def onEvent(self, event: pygame.event.Event):
        """Handles events generated by the user"""
        if event.type == pygame.QUIT:
            #closes the window
            self._running = False
            pygame.quit()
            
class AbstractButton:
    def __init__(self, text: str, width:int, height:int, position:tuple[int, int]):
        pygame.font.init() #initializes pygame modules
        self._buttonRect=pygame.Rect(position, (width, height)) #position is for top left
        self._buttonRectColor=buttonColor #default color when unpressed
        guiFont=pygame.font.Font(None, 30) #generates font
        self._textSurface=guiFont.render(text, True, textColor) #renders the text
        self._textRect=self._textSurface.get_rect(center=self._buttonRect.center) #centers the text in the button
        self._buttonClicked=False #sets the button as not clicked

    def draw(self, screen: pygame.Surface):
        """Draws the button on the given surface"""
        #draws the button as a rectangle with rounded corners
        pygame.draw.rect(screen, self._buttonRectColor, self._buttonRect, border_radius=12) #border radius is for rounded corners
        screen.blit(self._textSurface, self._textRect) #draws the rectangle on the given screen
        self._handleButtonClick() #function that checks if the button has been pressed 
    
    def _handleButtonClick(self):
        """Checks if button has been pressed and starts on click function"""
        mouse_pos =pygame.mouse.get_pos() #returns mouse position
        if self._buttonRect.collidepoint(mouse_pos): #is the mouse over the button?
            self._buttonRectColor=buttonHoverColor #changes button color to hover
            if pygame.mouse.get_pressed()[0]: #[left mouse, middle mouse, right mouse] boolean
                self._buttonClicked=True #sets button as pressed
            else:
                if self._buttonClicked==True:
                    self.onClick() #does action
                    self._buttonClicked=False #resets button
                    #if no check is applied the button would be pressed many times per frame
        else:
            #mouse button is not pressed, restores original color
            self._buttonRectColor=buttonColor

    @abc.abstractmethod
    def onClick(self):
        """This is the action done when the button is pressed, implement this in your button class"""
        raise NotImplementedError("Please implement this method")

class PrintButton(AbstractButton):
    def onClick(self):
        """Prints a test string when the button is pressed"""
        print("Hello concrete method")

if __name__ == "__main__":
    myApp= App()
    myButton=PrintButton('Test button', 200, 200, (20, 20)) 
    while(myApp.appRunning): #event loop
        myApp.screen.fill(backgroundColor) #fills the background color for the application
        myButton.draw(myApp.screen) #draws the button on the screen
        pygame.display.update() #necessary or the screen won't draw at all
        for event in pygame.event.get():
            myApp.onEvent(event) #handles generated events
