import pygame
from abc import ABC, abstractmethod
from wiredwolf.view.Components import VContainer, HContainer
from wiredwolf.view.Constants import BACKGROUND_COLOR, FontSize, Screens
from functools import partial

FPS=60
username=""
lobby_name=""
class App:
    """The main window for the Wiredwolf game"""
    def __init__(self)-> None:
        pygame.init() #initializes pygame modules
        self._size=(640, 400) #default starting values
        self._icon = pygame.image.load('resources/icon.png') #load image from file
        pygame.display.set_icon(self._icon) #set image as window icon
        self._display_screen = pygame.display.set_mode(self._size, pygame.RESIZABLE) #the window is resizable
        pygame.display.set_caption("Wirewolf") #window title
        self._running = True
        self._game_state_manager=GameStateManager(Screens.HOME)
        self._start_screen=StartScreen(self._display_screen, self._game_state_manager)
        self._test_screen=TestScreen(self._display_screen, self._game_state_manager)
        self._new_lobby_screen=NewLobbyScreen(self._display_screen, self._game_state_manager)
        self._search_lobby_screen=SearchLobbyScreen(self._display_screen, self._game_state_manager)
        self._waiting_lobby=WaitingLobbyScreen(self._display_screen, self._game_state_manager)
        self._dictionary={Screens.HOME: self._start_screen, Screens.TEST:self._test_screen, 
                          Screens.NEW_LOBBY:self._new_lobby_screen, Screens.SEARCH_LOBBY:self._search_lobby_screen, Screens.LOBBY_WAITING:self._waiting_lobby}
        self._clock = pygame.time.Clock()
        self._next_event=None
        
    @property
    def screen(self)->pygame.Surface:
        """Returns the surface of the application"""
        return self._display_screen

    @property
    def screen_size(self)->tuple[int, int]:
        """Returns the size of the window"""
        return self._size
    
    @property
    def app_running(self)->bool:
        """Returns true if the window is running"""
        return self._running

    def _on_event(self, event: pygame.event.Event)-> None:
        """Handles events generated by the user"""
        if event.type == pygame.QUIT:
            #closes the window
            self._running = False
            pygame.quit()
        else:
            if event.type == pygame.WINDOWRESIZED:
                #when the window is resized, the local variable value is changed
                self._size=pygame.display.get_surface().get_size()
            else:
                #event is saved and may be handled by the specific screen
                self._next_event=event

    def update_display(self)->None:
        """Called inside the event loop, handles framerate limiting, event handling and scene switching"""
        pygame.display.update() #necessary or the screen won't draw at all
        self._dictionary[self._game_state_manager.current_state].run(self._next_event)
        self._next_event=None
        for event in pygame.event.get():
            self._on_event(event) #handles generated events 
        self._clock.tick(FPS)

class GameStateManager:
    """The game state manager internally stores which scene is displayed"""
    def __init__(self, start_screen:Screens) -> None:
        self._current_state=start_screen

    @property
    def current_state(self)->Screens:
        """Returns the screen the app game is on"""
        return self._current_state
    
    @current_state.setter
    def current_state(self, screen:Screens)->None:
        """Sets the current game state as the parameter given"""
        self._current_state=screen

class AbstractScreen(ABC):
    """A screen abstraction, handling the base work of any screen implementation"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        self._display=display
        self._game_state_manager=game_state_manager
    
    @abstractmethod
    def run(self, event:pygame.event.Event)->None:
        """This is where your screen is displayed"""
        raise NotImplementedError("Please implement this method")

def change_screen(game_state_manager:GameStateManager, target_screen:Screens)->None:
    """A function to change the application screen to the given one"""
    game_state_manager.current_state=target_screen

class StartScreen(AbstractScreen):
    """The start screen, the first screen showed at startup"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton, Text, TextField
        go_new_lobby=partial(change_screen, game_state_manager, Screens.NEW_LOBBY)
        new_lobby_button=CallbackButton(go_new_lobby, 'New Lobby', 250, 50) 
        go_search_lobby=partial(change_screen, game_state_manager, Screens.SEARCH_LOBBY)
        search_lobby_button=CallbackButton(go_search_lobby, 'Search for lobbies', 250, 50) 
        self._field=TextField(250, 50)
        username_enter=Text("Insert username:", font=FontSize.H2)
        list=[username_enter, self._field, new_lobby_button, search_lobby_button]
        self._v_container=VContainer(10, list, self._display.get_size())
        self._title_container=VContainer(0, [Text("Wiredwolf", (0, 10))], self._display.get_size(), (50, 15))
        
    def run(self,event:pygame.event.Event)->None:
        """The start screen, the first screen showed at startup"""
        self._display.fill(BACKGROUND_COLOR) #fills the background color for the application
        self._v_container.draw(self._display)
        self._title_container.draw(self._display)
        if event is not None:
            self._field.handle_event(event)
            tmp=self._field.text
            global username
            if len(tmp)>0 and str.isspace(tmp)==False: #the username field is filled by chars, not empty or only whitespaces
                username=self._field.text #save username in global variable
            else:
                username="username" #default username

class NewLobbyScreen(AbstractScreen):
    """A simple new lobby screen"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton, Text, TextField, EnabledButton
        self._title=VContainer(10,[Text("Create a new lobby")], self._display.get_size(),(50,20))
        lobby_name=Text("Insert the new lobby name", font=FontSize.H2)
        self._field=TextField(300, 50)
        create_lobby=partial(change_screen, game_state_manager, Screens.LOBBY_WAITING)
        self._create_lobby_button=EnabledButton(create_lobby, 'Create the new lobby!', 300, 50,font=FontSize.H2)
        go_home=partial(change_screen, game_state_manager, Screens.HOME)
        go_home_button=CallbackButton(go_home, 'Go back to start screen', 300, 50,font=FontSize.H2)
        self._button_container=VContainer(10, [lobby_name, self._field, self._create_lobby_button], self._display.get_size())
        self._button_back=VContainer(10, [go_home_button], self._display.get_size(), (50, 80))
    
    def run(self,event:pygame.event.Event)->None:
        """The new lobby screen, to create a new lobby"""
        self._display.fill(BACKGROUND_COLOR)
        self._title.draw(self._display)
        self._button_container.draw(self._display)
        self._button_back.draw(self._display)
        if event is not None:
            self._field.handle_event(event)
            tmp=self._field.text
            global lobby_name
            if len(tmp)>0 and str.isspace(tmp)==False: #the lobby name field is filled by chars, not empty or only whitespaces
                lobby_name=self._field.text #save new lobby name in global variable
                self._create_lobby_button.is_enabled=True
            else:
                self._create_lobby_button.is_enabled=False
                lobby_name=""

class SearchLobbyScreen(AbstractScreen):
    """A simple search lobby screen"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton, Text, SelectorButton, SelectorGroup, EnabledButton
        self._title=VContainer(0, [Text("Search for an existing lobby")], self._display.get_size(), (50, 10))
        selector_list=[SelectorButton("Lobby 1", 100,20), SelectorButton("Lobby 2", 100,20), SelectorButton("Lobby 3", 100,20)]
        self._selector=SelectorGroup(selector_list) #This handles how the selectors BEHAVE as a group
        self._lobby_group=VContainer(20, selector_list, self._display.get_size()) #This handles how the selectors are DISPLAYED
        go_home=partial(change_screen, game_state_manager, Screens.HOME)
        join_lobby=partial(change_screen, game_state_manager, Screens.LOBBY_WAITING)
        self._join_button=EnabledButton(join_lobby, 'Join selected lobby', 300, 50,font=FontSize.H2)
        self._buttons=HContainer(10, [CallbackButton(go_home, 'Go back to start screen', 300, 50,font=FontSize.H2), self._join_button], self._display.get_size(), (50, 80))
    
    def run(self,event:pygame.event.Event)->None:
        """The search lobby screen, to search for existing lobbies"""
        self._display.fill(BACKGROUND_COLOR)
        self._title.draw(self._display)
        self._lobby_group.draw(self._display)
        self._buttons.draw(self._display)
        global lobby_name
        tmp=self._selector.selectedText()
        if len(tmp)>0:
            self._join_button._is_enabled=True
            if lobby_name!=tmp:
                lobby_name=tmp
        else:
            self._join_button._is_enabled=False
class TestScreen(AbstractScreen):
    """A simple test screen"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import CallbackButton
        go_home=partial(change_screen, game_state_manager, Screens.HOME)
        my_button1=CallbackButton(go_home, 'test screen', 200, 50, font=FontSize.H1, default_color="#0033FF", activation_color="#5365AD") 
        button_list=[my_button1]
        self._button_container=VContainer(10, button_list, self._display.get_size())
    
    def run(self,event:pygame.event.Event)->None:
        """The test screen, to check for scene changes"""
        self._display.fill("#25A839")
        self._button_container.draw(self._display)

class WaitingLobbyScreen(AbstractScreen):
    """The waiting room after joining a lobby"""
    def __init__(self, display: pygame.Surface, game_state_manager:GameStateManager) -> None:
        super().__init__(display, game_state_manager)
        from wiredwolf.view.Components import Text
        global lobby_name
        self._local_lobby=lobby_name
        self._title=Text("Waiting for other players to join "+self._local_lobby+" lobby")
        self._title_container=VContainer(0, [self._title], self._display.get_size(), (50,20))
        self._waiting=VContainer(0,[Text("1 player connected...", font=FontSize.H2)], self._display.get_size()) #TODO: how many connected users are waiting?
        self._trigger_update=False
        
    def run(self,event:pygame.event.Event)->None:
        """A simple waiting screen"""
        global lobby_name
        if lobby_name!=self._local_lobby:
            #Since this screen is started before the lobby is chosen, this updates the display
            self._local_lobby=lobby_name
            self._title.text="Waiting for other players to join "+self._local_lobby+" lobby"
            self._trigger_update=True #Once this component is drawn the size of the text box has yet to change, so a manual update after draw is needed
        self._display.fill(BACKGROUND_COLOR) #fills the background color for the application
        self._title_container.draw(self._display)
        self._waiting.draw(self._display)
        if self._trigger_update:
            #Title has changed text and dimensions, update the container with the new dimensions
            self._title_container.manually_update()
            self._trigger_update=False
        if event is not None:
            if event.type==pygame.KEYUP and event.key==pygame.K_RETURN:
                #TODO: change screen when all users have joined the waiting room
                self._game_state_manager.current_state=Screens.TEST

if __name__ == "__main__":
    my_app=App()
    while my_app.app_running:
        my_app.update_display()
